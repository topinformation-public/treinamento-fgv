/**
 * Provide template method to Soap Proxies
 * How to use:
 *
 * First implement interface SoapProxyService into Proxy imported by wsdl2apex
 *
 * //Generated by wsdl2apex
 * public class SapCustomerOutboundProxy {
 *     // some types
 *
 *     public class CustomerRfcFunction implements SoapProxyService {
 *
 *         public String endpoint_x = '';
 *
 *         public Map<String, String> inputHttpHeaders_x;
 *
 *         public Map<String, String> outputHttpHeaders_x;
 *
 *         public String clientCertName_x;
 *
 *         public String clientCert_x;
 *
 *         public String clientCertPasswd_x;
 *
 *         public Integer timeout_x = 120000;
 *
 *         private String[] ns_map_type_info = new String[] {'urn:sap-com:document:sap:soap:functions:mc-style', 'AtlasCustomerOutboundProxy', 'urn:sap-com:document:sap:rfc:functions', 'SapRfcCommons'};
 *
 *         public CustomerRfcFunction () {
 *             inputHttpHeaders_x = new Map<String, String>();
 *         }
 *
 *         public void setEndPoint (String url) {
 *             endpoint_x = url;
 *         }
 *
 *         public String getEndPoint () {
 *             return endpoint_x;
 *         }
 *
 *         public void addAuthenticationHeader(String headerValue) {
 *             inputHttpHeaders_x.put ('Authorization', headerValue);
 *         }
 *
 *         public void setClientCertName (String clientCertName) {
 *             clientCertName_x = clientCertName;
 *         }
 *
 *         public void setClientCert( String clientCert ) {
 *             clientCert_x = clientCert;
 *         }
 *
 *         public void setClientCertPassword( String clientCertPasswd ) {
 *             clientCertPasswd_x = clientCertPasswd;
 *         }
 *
 *         public void setTimeout( Integer timeout ) {
 *             timeout_x = timeout;
 *         }
 *
 *     }
 *
 * }
 *
 * @author ercarval
 */
public abstract class AbstractSoapOutboundService {

    protected SoapProxyService service;

    protected HttpAuthentication authentication;

    protected EventQueue event;

    public AbstractSoapOutboundService() {
    }

    public AbstractSoapOutboundService(EventQueue event, SoapProxyService service) {
        this();
        this.event = event;
        this.service = service;
    }

    public void init () {
        authentication = HttpAuthentication.build(this.event.config);
    }

    virtual
    public SoapProxyService getService () {
        return service;
    }

    virtual
    public void setup() {

        //System.debug('----------------- setup ' + JSON.serialize(event));
        init();

        this.service.setEndPoint ( event.config.endPointUrl__c );

        event.log ( ' --------- Setup Https to  ' + this.service.getEndPoint() );

        setupAuthorization();
    }

    virtual
    protected void setupAuthorization () {

        authentication = HttpAuthentication.build(this.event.config);

        if ( !this.authentication.needAuthentication() ) return;

        this.service.addAuthenticationHeader(authentication.getHttpHeader());
    }

    virtual
    public Object send () {

        setup();

        requestPrepare();

        callService();

        return processResponse ();
    }

    virtual
    protected void requestPrepare() {
        //apply transformation here
    }

    protected abstract void callService ();

    virtual
    protected Object processResponse() {
        return null;
    }


}